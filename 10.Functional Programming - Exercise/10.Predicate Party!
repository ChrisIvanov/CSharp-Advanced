using System;
using System.Collections.Generic;
using System.Linq;

namespace _10.PredicateParty_
{
    class Program
    {
        static void Main(string[] args)
        {
            List<string> names = Console.ReadLine().Split().ToList();
            string[] command = Console.ReadLine().Split().ToArray();

            while (command[0] != "Party!")
            {
                string nameListCommand = command[0];
                string criteria = command[1];
                string argument = command[2];
                int counter = 0;
                
                Func<List<string>, List<string>> func = n => n.StartsWith(argument);
                Predicate<string> predicate = p => p.Select
                {
                    foreach (string item in collection)
                    {

                    }
                };


                switch (nameListCommand)
                {
                    case "Double":
                        if (criteria == "StartsWith")
                        {
                           
                            while(names.Count > 0)
                            {
                                if (func(names[counter]))
                                {
                                    names.Insert(counter, names[counter]);
                                    counter++;
                                }
                                counter++;

                                if (counter >= names.Count)
                                {
                                    break;
                                }
                            }
                        }

                        else if (criteria == "EndsWith")
                        {
                            Func<string, bool> func = n => n.EndsWith(argument);

                            while (names.Count > 0)
                            {
                                if (func(names[counter]))
                                {
                                    names.Insert(counter, names[counter]);
                                    counter++;
                                }
                                counter++;

                                if (counter >= names.Count)
                                {
                                    break;
                                }
                            }
                        }

                        else if (criteria == "Length")
                        {
                            int nameLength = int.Parse(argument);
                            Func<string, bool> func = n => n.Length == nameLength;
                            while (names.Count > 0)
                            {
                                if (func(names[counter]))
                                {
                                    names.Insert(counter, names[counter]);
                                    counter++;
                                }
                                counter++;

                                if (counter >= names.Count)
                                {
                                    break;
                                }
                            }
                        }

                        break;

                    case "Remove":
                        if (criteria == "StartsWith")
                        {
                            Func<string, bool> func = n => n.StartsWith(argument);
                            while (names.Count > 0)
                            {
                                if (func(names[counter]))
                                {
                                    names.Remove(names[counter]);
                                }
                                counter++;

                                if (counter >= names.Count)
                                {
                                    break;
                                }
                            }
                        }

                        else if (criteria == "EndsWith")
                        {
                            Func<string, bool> funcEndsWith = n => n.EndsWith(argument);

                            while (names.Count > 0)
                            {
                                if (funcEndsWith(names[counter]))
                                {
                                    names.Remove(names[counter]);
                                }
                                counter++;

                                if (counter >= names.Count)
                                {
                                    break;
                                }
                            }
                        }

                        else
                        {
                            int nameLength = int.Parse(argument);
                            Func<string, bool> funcRemove = n => n.Length == nameLength;
                            while (names.Count > 0)
                            {
                                if (funcRemove(names[counter]))
                                {
                                    names.Remove(names[counter]);
                                }
                                counter++;

                                if (counter >= names.Count)
                                {
                                    break;
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }

                command = Console.ReadLine().Split().ToArray();
            }

            if (names.Count > 0)
            {
                Console.Write(String.Join(", ", names));
                Console.WriteLine(" are going to the party!");
            }

            else
            {
                Console.WriteLine("Nobody is going to the party!");
            }
        }
    }
}
